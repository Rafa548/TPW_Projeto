Funcionalidades Implementadas
	api (para receber todos os dados das noticias) (foram utilizadas funçoes para mudar a Chave da api ao ser alcançado o limite de requests da mesma)
	login (bloqueio de multiplos login errados (3 tentativas -> 10min de timeout))
	register (password forte necessaria (com alertas))
	profile (edit profile com verificaçoes de segurança (email tem de ser unico e confiramaçao da password atual))
	custom search/categorias (com save/(remove de save) de artigos (a search tem base no titulo das noticias e é a unica pagina onde devido á sua especifidade não é usada cache) para 									alem disso nas categorias tem latest and popular news gerais) 
	modal para escolher interesses (apenas se o user ainda nao tiver nenhum interesse selecionado)
	django cache para reduzir uso da api (usado em geral pelo website (é importante mencionar que a mesma é para cada user, ou seja users diferentes têm caches/paginas diferentes))
	home page que muda com/sem log in (atualizado a cada 30 segundos com base no cache)
	notificaçoes (atualizado a cada 30 segundos com base no cache e nos interesses do user)
	comandos (adicionar interesses,adicionar admin,limpar dados na base de dados, adicionar users (com e sem interesses))
	websockets para chat (nao funciona no python anywhere permite troca de mensagens entre users )
	ao clicar em qualquer noticia é utilizada um view para adicionar a mesma ao historico do user e redireciona-lo para a noticia no site de origem
	
	Por fim qualquer verificaçao da integridade dos dados pode ser feito usando o /admin disponibilizado por defeito pelo django
	
		
Como usar:
	Uso geral -> (a cada 30 segundos são atualizadas os redultados das pages e as notificaçoes)

	localmente (execuçao recomendada onde funciona por completo )
		comandos necessarios
			python -m venv venv
			source venv/bin/activate (ubuntu)
			pip install -r requirements.txt
			
			python3 manage.py createcachetable (cria a tabela de cache)
			python3 manage.py makemigrations
			python3 manage.py migrate (é importante)
			***python3 manage.py add_interests (adiciona interesses ja configurados) (para adicionar mais interesses ir diretamenta á pagina admin do django)

			python3 manage.py runserver (correr o servidor)
		
		comandos opcionais
			python3 manage.py create_admin (cria o admin para acessar ao admin do danjo ou usar como usar normal) ##opcional
				credenciais-> email -> admin@default.com
					      password-> admin
			python3 manage.py clean_db (limpeza completa da base de dados) ##opcional

			python3 manage.py add_users_with_interests (users ja feitos) (ja se encontram com passwords compativeis com os requisitos e os interesses definidos)
				##importante ter o comando *** ja executado
				credenciais-> email-> user3@example.com
					      password -> User3pass!
								ou	(Cada um com os seus interesses)
					      email-> user4@example.com
					      password -> User4pass!
				

			python3 manage.py add_users (users ja feitos) (ja se encontram com passwords compativeis com os requisitos)
				credenciais-> email-> user1@example.com
					      password -> User1pass!
								ou
					      email-> user2@example.com
					      password -> User2pass!

		Utilizaçao
			com register -> registar,dar login, escolher interesses e utilizar o site normalmente 								
			com utilizador pre registado (sem interesses)-> dar login escolher interesses e utilizar o site normalmente
				*para testar o chat entre users é recomendado abrir num separador anonimo uma nova janela do website com um user diferente

		
		

	pythonAnywhere (tudo configurado, devido a limitaçoes nao permite uso da funcionalidade de chat entre users)
		com register -> registar,dar login, escolher interesses e utilizar o site normalmente 								
		com utilizador pre registado (sem interesses)-> dar login escolher interesses e utilizar o site normalmente													
		


